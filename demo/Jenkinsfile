node{
     

      stage("Repo"){
        checkout scm
        sh 'echo "ayudaaaa"'
      }

      stage('JunitTest') {
          catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    dir("/var/lib/jenkins/workspace/Tingeso/demo") {
                        sh 'chmod +x ./gradlew'
                        sh './gradlew test'
                    }
          }
  		}

     /*stage('SonarQube analysis') {
    			
				dir("/var/lib/jenkins/workspace/Tingeso/demo") {
					withSonarQubeEnv('sonarqube') { // Will pick the global server connection you have configured
                        sh 'chmod 777 ./gradlew'
                        sh './gradlew sonarqube'
    					}
				
			  }
  		}*/

      stage("Build") {
          sh """ docker build --build-arg JAR_FILE=build/libs/\\*.jar -t demo ."""
      }
/*
      stage("Try"){
        script { 
                    docker.withRegistry( '', registryCredential ) { 
                        sh 'docker push demo'
                    }
                } 
      }
*/
      stage('Login DockerHub'){
        withCredentials([usernamePassword(credentialsId: 'dockerHub', usernameVariable: 'HUB_USER', passwordVariable: 'HUB_TOKEN')]) {                      
                    sh '''
                        docker login -u $HUB_USER -p $HUB_TOKEN 
                    '''
        }
      }

      stage('Push'){
          sh 'docker push franciscavera/backend-ev2:latest'
      }

      /*stage("Run") {
        timeout(time: 80, unit: 'SECONDS') {
           catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              sh 'docker run -i -p 8081:8081 demo'
           }
        }
      }
      */
}